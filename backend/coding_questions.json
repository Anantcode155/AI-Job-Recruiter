[
  {
    "id": 1,
    "title": "Two Sum",
    "description": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.",
    "testcases": [
      { "input": "4\n2 7 11 15\n9\n", "expected_output": "[0,1]\n" },
      { "input": "3\n3 2 4\n6\n", "expected_output": "[1,2]\n" }
    ]
  },
  {
    "id": 2,
    "title": "Reverse String",
    "description": "Write a function that reverses a string.",
    "testcases": [
      { "input": "hello\n", "expected_output": "olleh\n" },
      { "input": "OpenAI\n", "expected_output": "IAnepO\n" }
    ]
  },
  {
    "id": 3,
    "title": "Fibonacci Number",
    "description": "Given n, return the nth Fibonacci number.",
    "testcases": [
      { "input": "5\n", "expected_output": "5\n" },
      { "input": "10\n", "expected_output": "55\n" }
    ]
  },
  {
    "id": 4,
    "title": "Palindrome Check",
    "description": "Check if a given string is a palindrome (reads the same forwards and backwards).",
    "testcases": [
      { "input": "racecar\n", "expected_output": "true\n" },
      { "input": "hello\n", "expected_output": "false\n" }
    ]
  },
  {
    "id": 5,
    "title": "Maximum Subarray",
    "description": "Find the contiguous subarray with maximum sum (Kadane's algorithm).",
    "testcases": [
      { "input": "5\n-2 1 -3 4 -1\n", "expected_output": "4\n" },
      { "input": "3\n1 2 3\n", "expected_output": "6\n" }
    ]
  },
  {
    "id": 6,
    "title": "Binary Search",
    "description": "Implement binary search to find target in sorted array.",
    "testcases": [
      { "input": "5\n1 3 5 7 9\n5\n", "expected_output": "2\n" },
      { "input": "4\n1 2 3 4\n3\n", "expected_output": "2\n" }
    ]
  },
  {
    "id": 7,
    "title": "Longest Common Subsequence",
    "description": "Given two strings, find the length of their longest common subsequence.",
    "testcases": [
      { "input": "abcde\nace\n", "expected_output": "3\n" },
      { "input": "abc\nabc\n", "expected_output": "3\n" },
      { "input": "abc\ndef\n", "expected_output": "0\n" }
    ]
  },
  {
    "id": 8,
    "title": "Merge Intervals",
    "description": "Given an array of intervals, merge all overlapping intervals.",
    "testcases": [
      { "input": "4\n1 3\n2 6\n8 10\n15 18\n", "expected_output": "[[1,6],[8,10],[15,18]]\n" },
      { "input": "2\n1 4\n4 5\n", "expected_output": "[[1,5]]\n" },
      { "input": "3\n1 4\n2 3\n5 6\n", "expected_output": "[[1,4],[5,6]]\n" }
    ]
  },
  {
    "id": 9,
    "title": "Word Ladder",
    "description": "Find the shortest transformation sequence from beginWord to endWord.",
    "testcases": [
      { "input": "hit\ncog\n5\nhot dot dog lot log cog\n", "expected_output": "5\n" },
      { "input": "hit\ncog\n5\nhot dot dog lot log\n", "expected_output": "0\n" },
      { "input": "a\nc\n3\na b c\n", "expected_output": "2\n" }
    ]
  },
  {
    "id": 10,
    "title": "Course Schedule",
    "description": "Determine if you can finish all courses given prerequisites.",
    "testcases": [
      { "input": "2\n1\n0 1\n", "expected_output": "true\n" },
      { "input": "2\n2\n1 0\n0 1\n", "expected_output": "false\n" },
      { "input": "3\n2\n1 0\n2 0\n", "expected_output": "true\n" }
    ]
  },
  {
    "id": 11,
    "title": "Minimum Window Substring",
    "description": "Find the minimum window in s that contains all characters in t.",
    "testcases": [
      { "input": "ADOBECODEBANC\nABC\n", "expected_output": "BANC\n" },
      { "input": "a\na\n", "expected_output": "a\n" },
      { "input": "a\naa\n", "expected_output": "\n" }
    ]
  },
  {
    "id": 12,
    "title": "Sliding Window Maximum",
    "description": "Find the maximum element in each sliding window of size k.",
    "testcases": [
      { "input": "4\n1 3 -1 -3\n2\n", "expected_output": "[3,3]\n" },
      { "input": "3\n1 -1\n1\n", "expected_output": "[1,-1]\n" },
      { "input": "5\n9 11\n2\n", "expected_output": "[11]\n" }
    ]
  },
  {
    "id": 13,
    "title": "Edit Distance",
    "description": "Find the minimum number of operations to convert word1 to word2.",
    "testcases": [
      { "input": "horse\nros\n", "expected_output": "3\n" },
      { "input": "intention\nexecution\n", "expected_output": "5\n" },
      { "input": "abc\nabc\n", "expected_output": "0\n" }
    ]
  },
  {
    "id": 14,
    "title": "Longest Increasing Subsequence",
    "description": "Find the length of the longest increasing subsequence.",
    "testcases": [
      { "input": "6\n10 9 2 5 3 7 101 18\n", "expected_output": "4\n" },
      { "input": "4\n0 1 0 3 2 3\n", "expected_output": "4\n" },
      { "input": "1\n7 7 7 7 7 7 7\n", "expected_output": "1\n" }
    ]
  },
  {
    "id": 15,
    "title": "Coin Change",
    "description": "Find the fewest number of coins needed to make up the amount.",
    "testcases": [
      { "input": "3\n1 3 4\n6\n", "expected_output": "2\n" },
      { "input": "3\n2\n3\n", "expected_output": "-1\n" },
      { "input": "1\n1\n0\n", "expected_output": "0\n" }
    ]
  },
  {
    "id": 16,
    "title": "House Robber",
    "description": "Find the maximum amount of money you can rob without alerting police.",
    "testcases": [
      { "input": "4\n1 2 3 1\n", "expected_output": "4\n" },
      { "input": "5\n2 7 9 3 1\n", "expected_output": "12\n" },
      { "input": "1\n2\n", "expected_output": "2\n" }
    ]
  },
  {
    "id": 17,
    "title": "Decode Ways",
    "description": "Find the number of ways to decode a message containing digits.",
    "testcases": [
      { "input": "12\n", "expected_output": "2\n" },
      { "input": "226\n", "expected_output": "3\n" },
      { "input": "06\n", "expected_output": "0\n" }
    ]
  },
  {
    "id": 18,
    "title": "Unique Paths",
    "description": "Find the number of unique paths from top-left to bottom-right.",
    "testcases": [
      { "input": "3 7\n", "expected_output": "28\n" },
      { "input": "3 2\n", "expected_output": "3\n" },
      { "input": "7 3\n", "expected_output": "28\n" }
    ]
  },
  {
    "id": 19,
    "title": "Word Break",
    "description": "Determine if a string can be segmented into dictionary words.",
    "testcases": [
      { "input": "leetcode\n4\nleet code leetco de\n", "expected_output": "true\n" },
      { "input": "applepenapple\n3\napple pen apple\n", "expected_output": "true\n" },
      { "input": "catsandog\n6\ncats dog sand and cat\n", "expected_output": "false\n" }
    ]
  },
  {
    "id": 20,
    "title": "Maximum Product Subarray",
    "description": "Find the contiguous subarray with maximum product.",
    "testcases": [
      { "input": "4\n2 3 -2 4\n", "expected_output": "6\n" },
      { "input": "3\n-2 0 -1\n", "expected_output": "0\n" },
      { "input": "2\n-2 3\n", "expected_output": "3\n" }
    ]
  }
]
